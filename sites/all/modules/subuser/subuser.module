<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * Implements hook_permission().
 */
function subuser_permission() {
  $permissions = array(
    'administer subusers' => array(
      'title' => t('Administer subusers'),
      'description' => t('Allows a user to view/edit/delete subusers.'),
    ),
    'override subuser relation' => array(
      'title' => t('Override relation'),
      'description' => t('Override the default for subuser_relation field which determines if a relation should be stored.'),
    ),
  );

  // Provide a create subuser permission for each role.
  foreach (user_roles(TRUE) as $rid => $role) {
    $permissions['create subuser ' . $rid] = array(
      'title' => t('Create an %role', array('%role' => $role)),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function subuser_menu() {
  $items = array();

  $items['user/%user/subuser/create'] = array(
    'title' => 'Add user',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/people/create'),
    'access callback' => 'subuser_access_create',
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function subuser_menu_alter(&$items) {
  $items['admin/people/create']['access callback'] = 'subuser_access_create_callback';
}

/**
 * Check if an account has access to at least one create subuser permission.
 *
 * @param $account
 *   (optional) The account to check, if not given use currently logged in user.
 * @return
 *   Boolean TRUE if the account has access to create a subuser.
 */
function subuser_access_create($account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }

  foreach (user_roles(TRUE) as $rid => $role) {
    if (user_access('create subuser ' . $rid, $account)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Determine whether the user has a given privilege.
 *
 * If not subuser_access_create() is checked to determin if the permission
 * should be grantted for the current request. The 'access callback' for
 * admin/people/create is changed to this function which should be given the
 * string 'administer users'.
 *
 * @param $string
 *   The permission, such as "administer nodes", being checked for.
 * @param $account
 *   (optional) The account to check, if not given use currently logged in user.
 * @return
 *   Boolean TRUE if the current user has the requested permission.
 */
function subuser_access_create_callback($string, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }

  if (subuser_access_create($account)) {
    $static = &drupal_static('user_access');
    $static[$account->uid][$string] = TRUE;
  }

  return user_access($string, $account);
}

/**
 * Implements hook_form_FORM_ID_alter(): user_register_form.
 */
function subuser_form_user_register_form_alter(&$form, &$form_state) {
  global $user;

  // If the user does not have access to the roles field then filter the roles
  // field based on subuser permissions and display if more then one left. If
  // the user has 'administer permissions' then the #access will be set to TRUE
  // and they will have access to all roles, otherwise if the user has access
  // to this page through subuser then only provide them with the roles they
  // are allowed based on subuser. All users will have at least one role, but
  // that role may be 'authenticated user' which is not included in #options.
  if (!$form['account']['roles']['#access']) {
    foreach ($form['account']['roles']['#options'] as $rid => $role) {
      if (!user_access('create subuser ' . $rid)) {
        unset($form['account']['roles']['#options'][$rid]);
      }
    }
    $form['account']['roles']['#access'] = count($form['account']['roles']['#options']) > 0;
  }

  $form['subuser_relation'] = array(
    '#type' => 'checkbox',
    '#title' => t('User relation'),
    '#description' => t('Store a relationship that will allow for further management of the user.'),
    '#default_value' => $user->uid && variable_get('subuser_relation', TRUE),
    '#access' => $user->uid && user_access('override subuser relation'),
  );

  $form['#submit'][] = 'subuser_user_register_form_submit';
}

/**
 * Additional submit handler for user_register_form.
 */
function subuser_user_register_form_submit($form, &$form_state) {
  global $user;

  // If the subuser relation is to be stored then create the relation.
  if ($form_state['values']['subuser_relation']) {
    $endpoints = array(
      array('entity_type' => 'user', 'entity_id' => $form_state['user']->uid),
      array('entity_type' => 'user', 'entity_id' => $user->uid),
    );
    relation_create('subuser', $endpoints);
  }
}

/**
 * Load all related accounts.
 *
 * @param $account
 *   The user account to which all other accounts will be related.
 * @param $children
 *   (Optional) Boolean TRUE to load children of account, otherwise FALSE to
 *   load parent(s) of account.
 * @return
 *   An associative array of related accounts were key and value is user ID.
 */
function subuser_load_all($account, $children = TRUE) {
  $users = array();
  foreach (relation_query('user', $account->uid, (int) $children)->execute() as $result) {
    $relation = relation_load($result->rid, $result->vid);
    $users[$uid = (int) $relation->endpoints[LANGUAGE_NONE][0]['entity_id']] = $uid;
  }
  return $users;
}

/**
 * Implements hook_views_api().
 */
function subuser_views_api() {
  return array(
    'api' => 3,
  );
}
